---
description: uni_modules 插件开发和使用规范
globs: *.vue,*.js,*.ts,*.json
alwaysApply: false
---
# uni_modules 插件规范

## 插件结构
uni_modules是uni-app的插件模块化规范，支持插件的统一管理和更新。

### 1. 标准目录结构
```
uni_modules/
└── plugin-name/
    ├── package.json          # 插件配置文件
    ├── readme.md            # 插件说明文档
    ├── changelog.md         # 更新日志
    ├── components/          # 组件目录
    │   └── plugin-comp/
    │       └── plugin-comp.vue
    ├── js_sdk/             # JS SDK目录
    │   └── index.js
    ├── static/             # 静态资源
    │   └── images/
    ├── pages/              # 页面目录（可选）
    ├── uniCloud/           # 云端代码（可选）
    │   ├── cloudfunctions/
    │   └── database/
    └── utssdk/             # UTS插件（可选）
```

### 2. package.json 配置
```json
{
  "id": "plugin-name",
  "displayName": "插件显示名称",
  "version": "1.0.0",
  "description": "插件描述",
  "keywords": ["uni-app", "plugin"],
  "repository": "https://github.com/author/plugin-name",
  "engines": {
    "HBuilderX": "^3.1.0"
  },
  "dcloudext": {
    "category": ["前端组件", "通用组件"],
    "sale": {
      "regular": {
        "price": "0.00"
      }
    },
    "contact": {
      "qq": ""
    },
    "declaration": {
      "ads": "无",
      "data": "无",
      "permissions": "无"
    },
    "npmurl": ""
  },
  "uni_modules": {
    "dependencies": ["other-plugin"],
    "encrypt": [],
    "platforms": {
      "cloud": {
        "tcb": "y",
        "aliyun": "y"
      },
      "client": {
        "App": {
          "app-vue": "y",
          "app-nvue": "y"
        },
        "H5-mobile": {
          "Safari": "y",
          "Android Browser": "y",
          "微信浏览器(Android)": "y",
          "QQ浏览器(Android)": "y"
        },
        "H5-pc": {
          "Chrome": "y",
          "IE": "y",
          "Edge": "y",
          "Firefox": "y",
          "Safari": "y"
        },
        "小程序": {
          "微信": "y",
          "阿里": "y",
          "百度": "y",
          "字节跳动": "y",
          "QQ": "y"
        },
        "快应用": {
          "华为": "n",
          "联盟": "n"
        }
      }
    }
  }
}
```

## 插件开发规范

### 1. 组件开发
```vue
<!-- components/uni-custom/uni-custom.vue -->
<template>
  <view class="uni-custom" :class="customClass">
    <slot></slot>
  </view>
</template>

<script setup lang="ts">
interface Props {
  customClass?: string
  type?: 'primary' | 'success' | 'warning' | 'error'
}

const props = withDefaults(defineProps<Props>(), {
  customClass: '',
  type: 'primary'
})

// 组件逻辑
</script>

<style lang="scss" scoped>
@import '@/uni.scss';

.uni-custom {
  padding: $uni-spacing-row-base;
  border-radius: $uni-border-radius-base;
  
  &.primary {
    background-color: $uni-color-primary;
  }
}
</style>
```

### 2. JS SDK开发
```javascript
// js_sdk/index.js
class CustomSDK {
  constructor(options = {}) {
    this.options = options
  }
  
  init() {
    console.log('Custom SDK initialized')
  }
  
  method1(params) {
    return new Promise((resolve, reject) => {
      // SDK逻辑
      resolve(result)
    })
  }
}

export default CustomSDK

// 使用方式
// import CustomSDK from '@/uni_modules/plugin-name/js_sdk'
// const sdk = new CustomSDK()
// sdk.init()
```

### 3. 云函数插件
```javascript
// uniCloud/cloudfunctions/plugin-function/index.js
'use strict';

const db = uniCloud.database()

exports.main = async (event, context) => {
  const { action, data } = event
  
  switch (action) {
    case 'getData':
      return await getData(data)
    default:
      return {
        code: 400,
        message: '无效操作'
      }
  }
}

async function getData(params) {
  try {
    const result = await db.collection('data').get()
    return {
      code: 0,
      data: result.data
    }
  } catch (error) {
    return {
      code: 500,
      message: error.message
    }
  }
}
```

## 插件使用

### 1. easycom 自动导入
在pages.json中配置easycom规则：
```json
{
  "easycom": {
    "autoscan": true,
    "custom": {
      "^uni-(.*)": "@dcloudio/uni-ui/lib/uni-$1/uni-$1.vue",
      "^custom-(.*)": "@/uni_modules/custom-plugin/components/custom-$1/custom-$1.vue"
    }
  }
}
```

### 2. 手动导入使用
```vue
<template>
  <view>
    <custom-component></custom-component>
  </view>
</template>

<script setup lang="ts">
import CustomComponent from '@/uni_modules/custom-plugin/components/custom-component/custom-component.vue'
</script>
```

### 3. JS SDK使用
```typescript
import CustomSDK from '@/uni_modules/custom-plugin/js_sdk'

const sdk = new CustomSDK({
  apiKey: 'your-api-key'
})

sdk.init()

// 使用SDK方法
const result = await sdk.method1({
  param1: 'value1'
})
```

## 常用uni-admin插件

### 1. uni-upgrade-center（升级中心）
- 提供App版本管理和升级功能
- 支持整包更新和wgt资源包更新
- 配置manifest.json网络超时时间

### 2. uni-stat（统计分析）
- 提供用户行为统计分析
- 支持自定义事件统计
- 数据可视化展示

### 3. uni-id（用户体系）
- 统一的用户注册登录体系
- 支持多种登录方式
- 角色权限管理

### 4. uni-captcha（验证码）
- 图形验证码生成
- 支持SVG和BMP格式
- 防机器人验证

## 插件开发最佳实践

### 1. 命名规范
- 插件ID使用kebab-case：`uni-custom-plugin`
- 组件名使用PascalCase：`UniCustomPlugin`
- 文件名与目录名保持一致

### 2. 兼容性考虑
- 明确标注支持的平台
- 使用条件编译处理平台差异
- 提供降级方案

### 3. 文档规范
- readme.md详细说明用法
- 提供完整的代码示例
- 说明依赖和版本要求

### 4. 版本管理
- 遵循语义化版本控制
- changelog.md记录更新内容
- 向后兼容性考虑

### 5. 性能优化
- 按需加载，避免全量引入
- 组件懒加载
- 减少插件体积